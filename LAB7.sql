SET SERVEROUTPUT ON;

CREATE TABLE TAB1(ID_NUM NUMBER(9),
NAME_USER VARCHAR(26),SAL NUMBER(15)
);
INSERT INTO TAB1(ID_NUM,NAME_USER,SAL)
SELECT EMPLOYEE_ID,LAST_NAME,SALARY FROM employees;

SELECT * FROM TAB1;

/*If id is null then insert a new record, 
else try find the user with provided id 
and update existing user. 
If no record found with provided id - 
insert new record with specified ID. 

ID parameter should be IN OUT*/


CREATE  OR REPLACE PROCEDURE 
UPDATEINSERT
(UIID IN OUT
TAB1.ID_NUM%TYPE,
UINAME TAB1.NAME_USER%TYPE,
UISAL tab1.sal%TYPE)
IS
IDNUM NUMBER;
BEGIN 
SELECT ID_NUM INTO IDNUM
FROM TAB1
WHERE IDNUM=UIID;
IF UIID IS NULL THEN
INSERT INTO 
TAB1(ID_NUM,NAME_USER,SAL)
VALUES(UIID,UINAME,UISAL);
DBMS_OUTPUT.PUT_LINE('ID NULL');
ELSIF UIID=IDNUM THEN
UPDATE TAB1
SET ID_NUM=UIID,NAME_USER=UINAME,SAL=UISAL
WHERE ID_NUM=UIID;
dbms_output.put_line('ID IS CHANGED');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
INSERT INTO TAB1(ID_NUM,NAME_USER,SAL) 
VALUES (UIID,UINAME,UISAL);
dbms_output.put_line('NEW USER ADED');

END;


DECLARE
US_ID TAB1.ID_NUM%TYPE;
BEGIN
us_id:=33;
UPDATEINSERT(us_id,'BIBI',15000);
END;

SELECT * FROM TAB1;

ROLLBACK;
COMMIT;
SELECT * FROM TAB1;



//////////////////
Create a DELETE stored procedure 
that can delete record from database 
if record is already not active 
and disable record if record is active.
//////////////////////////////////////////////////
ALTER TABLE TAB1
ADD ISACTIVE NUMBER DEFAULT 1;

SELECT * FROM TAB1;



CREATE OR REPLACE PROCEDURE DELETEPROC
    (UIID IN OUT TAB1.ID_NUM%TYPE) 
IS 
    USAC NUMBER;
BEGIN
    SELECT ISACTIVE INTO USAC
    FROM TAB1
    WHERE ID_NUM = UIID;

    IF USAC = 1 THEN 
        UPDATE TAB1 SET ISACTIVE = 0 WHERE ID_NUM = UIID;
    ELSE
        DELETE FROM TAB1 WHERE ID_NUM = UIID;
    END IF;
END;

DECLARE
    US_ID TAB1.ID_NUM%TYPE;
BEGIN
    US_ID:=33;
    DELETEPROC(US_ID);
END;




///////////////////////////////////////////////////////////////
CREATE TABLE PRODUCT(
    PROD_ID NUMBER(8),
    PROD_NAME VARCHAR2(32),
    PROD_PRICE NUMBER(12)
);

CREATE TABLE TRANSACTION(
    TRANS_ID NUMBER(8),
    CLIENT_ID NUMBER(8),
    PROD_ID NUMBER(8),
    AMOUNT NUMBER(12),
    TRANS_DATE DATE
);

CREATE TABLE CLIENT(
    CLIENT_ID NUMBER(8),
    CLIENT_NAME VARCHAR2(32)
);

CREATE TABLE EXPENSES(
    EXP_ID NUMBER(8),
    EXP_MONTH NUMBER(3),
    EXP_CATEGORY VARCHAR(32),
    EXP_AMOUNT NUMBER(12)
);
INSERT INTO PRODUCT(PROD_ID,PROD_NAME,PROD_PRICE) VALUES (1, 'Milk', 290);

INSERT INTO TRANSACTION(TRANS_ID, CLIENT_ID, PROD_ID, AMOUNT, TRANS_DATE)
            VALUES (26102015, 15, 1, 5, TO_DATE('10-JUNE-20'));
            
INSERT INTO EXPENSES(EXP_ID, EXP_MONTH,EXP_CATEGORY,EXP_AMOUNT) VALUES (150021,2,1,110000);

INSERT INTO EXPENSES(EXP_ID, EXP_MONTH,EXP_CATEGORY,EXP_AMOUNT) VALUES (150020,6,1,10000);

SELECT * FROM PRODUCT;
SELECT * FROM EXPENSES;
SELECT * FROM TRANSACTION;

----FUNCT-----------------------

CREATE OR REPLACE FUNCTION DOBEP
    (SEL_MON IN EXPENSES.EXP_MONTH%TYPE)
RETURN DATE
IS
    DAY_BEP DATE;
    PP PRODUCT.PROD_PRICE%TYPE;
    EXAMO EXPENSES.EXP_AMOUNT%TYPE;
    CURSOR C_TRANS
    IS
        SELECT PROD_ID,AMOUNT,TRANS_DATE
        FROM TRANSACTION 
        WHERE EXTRACT(MONTH FROM TRANS_DATE) = SEL_MON
        ORDER BY TRANS_DATE;
BEGIN
    SELECT EXP_AMOUNT INTO EXAMO
    FROM EXPENSES
    WHERE EXP_MONTH = SEL_MON;
    FOR X IN C_TRANS
    LOOP
        SELECT PROD_PRICE INTO PP FROM PRODUCT WHERE PROD_ID = X.PROD_ID;
        --The formula for break-even point (BEP)
        --by dividing the total fixed costs of production 
        --by the contribution margin per unit of product manufactured.
        EXAMO := EXAMO-X.AMOUNT*pp;
        IF EXAMO<=0 THEN
            DAY_BEP:= X.TRANS_DATE;
            EXIT;
        END IF;
    END LOOP;
    RETURN DAY_BEP;
END;

///////////////////
--NUMBER OF MONTHS AND MONTHS
DECLARE
    NOM NUMBER:=2;
    MTH DATE;
BEGIN
    MTH := DOBEP(NOM);
    DBMS_OUTPUT.PUT_LINE('Day of BEP: ' || (MTH));
END;
ROLLBACK;
COMMIT;









-----------------------------4-----------------------------------
CREATE TABLE SCHEDULE(
    SCHEDULE_ID NUMBER(4) NOT NULL,
    TRAINING_DATE DATE NOT NULL
);
ALTER TABLE SCHEDULE ADD (
  CONSTRAINT SCH_PK PRIMARY KEY (SCHEDULE_ID));
CREATE SEQUENCE SCHEDULE_SEQ
  START WITH 1
  INCREMENT BY 1
  CACHE 1000;

DECLARE --ADD ALL DATE
    TRAIN_DATE DATE := SYSDATE;
    FLAG INT:=0;
BEGIN
    WHILE EXTRACT(YEAR FROM TRAIN_DATE)=2020
    LOOP
        IF TO_CHAR(TRAIN_DATE, 'DY') IN ('MON','WED','FRI') THEN
            INSERT INTO SCHEDULE(SCHEDULE_ID, TRAINING_DATE) VALUES (SCHEDULE_SEQ.NEXTVAL,TRAIN_DATE);    
        END IF;
        TRAIN_DATE:=TRAIN_DATE+1;
    END LOOP;
END;

DECLARE --try exist DATE
    TRAIN_DATE VARCHAR2(32) := '24-DEC-20';
    V_ID SCHEDULE.SCHEDULE_ID%TYPE;
BEGIN
    SELECT SCHEDULE_ID INTO V_ID
    FROM SCHEDULE WHERE TO_CHAR(TRAINING_DATE) = TRAIN_DATE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO SCHEDULE(SCHEDULE_ID, TRAINING_DATE) VALUES (SCHEDULE_SEQ.NEXTVAL,TO_DATE(TRAIN_DATE));
END;
/



